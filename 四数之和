class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();  //定义答案列表
        Arrays.sort(nums);  //排序
        int n = nums.length;  //数组长度
        for(int  i = 0; i < n - 3; i++){  //固定第一个值，后有三个值未固定
            if(i > 0 && nums[i] == nums[i - 1]) continue;  //从第一固定值的后一位开始，若与前一个值相同，则跳过此固定值，此i值已用，避免重复
            if(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;  //从固定值开始取四个值为从此取值的最小四数之和，若比目标值大，则此固定值及其后值均不可取，结束程序
            if(nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target) continue;  // 确定此固定值为四数之一，取最后三个数，若比目标值小，则跳过此固定值，选择更大的值
            for(int j = i + 1; j < n - 2; j++){  //固定第二个值，后有两个值未固定
                if(j - i > 1 && nums[j] == nums[j - 1]) continue;  // 从第二固定值的后一位开始，若与前一个值相同，则跳过此第二固定值，此j已用，避免重复
                if(nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) break;  // 第一个值已固定，在选取此j为固定值，并在此j后选择两个值，为这种情况下的最小四数之和，若比目标值大，此j与此后的值均无需考虑，结束程序
                if(nums[i] + nums[j] + nums[n- 1] + nums[n - 2] < target) continue;  // 确定前两个固定值，在后面选取两个最大的值，若比目标值小，则在第一固定值的前提下，跳过此固定值j，选取更大的第二固定值
                int left = j + 1;  //定义左指针
                int right = n - 1;  //定义右指针
                while(left < right){  // 保证左指针与右指针的顺序，且结束循环条件为两指针重合
                    int temp = nums[i] + nums[j] + nums[left] + nums[right];  //将选取的四个之和赋值给新定义变量
                    if(temp == target){  // 若四数之和与目标值相同
                        List<Integer> tempList = new LinkedList<>(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));  //定义一个列表，并将四个数添加进去
                        res.add(tempList);  // 将此列表添入答案列表
                        while(left < right && nums[left] == nums[left + 1]) left += 1;  //左指针小于右指针，若左指针指向的值与其下一个相邻的值相同，则左指针右移，直到左指针指向值与其下一值不同
                        while(left < right && nums[right] == nums[right - 1]) right -= 1;  //左指针小于右指针，若右指针指向值与其前一相邻值相同，则右指针左移，直到右指针指向值与其下一值不同
                        left += 1;  // 左指针右移，指向下一不同值
                        right -= 1;  //右指针左移，指向下一不同值
                    }else if(temp > target){  //若四数之和大与目标值
                        right -= 1;  //右指针左移，根据排序，减小四数之和
                    }else{  //若四数之和小与目标值
                        left += 1;  //左指针右移，根据排序，增大四数之和
                    }
                }
            }
        }
        return res;
    }
}
